#! /bin/sh /usr/share/dpatch/dpatch-run
## 901_CVE-2009-3094.dpatch by Jamie Strandboge <jamie@ubuntu.com>
##
## DP: Description:
## DP:  Security fix - this is presumed to fix CVE-2009-3094 (the disclosed
## DP:  information was limited so this has not been confirmed):
## DP:  .
## DP:  * modules/proxy/mod_proxy_ftp.c (parse_epsv_reply): New function.
## DP:    (proxy_ftp_handler): Fix possible NULL pointer deference in
## DP:    apr_socket_close(NULL) on error paths.  Fix possible buffer overread
## DP:    in EPSV response parser; use parse_epsv_reply instead.  Thanks to
## DP:    Jeff Trawick and Stefan Fritsch for analysis of this issue.
## DP: Origin: http://svn.apache.org/viewvc?revision=814652&view=revision

@DPATCH@
diff -urNad apache2-2.2.12~/modules/proxy/mod_proxy_ftp.c apache2-2.2.12/modules/proxy/mod_proxy_ftp.c
--- apache2-2.2.12~/modules/proxy/mod_proxy_ftp.c	2008-11-11 14:04:34.000000000 -0600
+++ apache2-2.2.12/modules/proxy/mod_proxy_ftp.c	2009-11-12 13:40:08.731683522 -0600
@@ -604,6 +604,31 @@
     return APR_SUCCESS;
 }
 
+/* Parse EPSV reply and return port, or zero on error.  Modifies
+ * 'reply'. */
+static apr_port_t parse_epsv_reply(char *reply)
+{
+    char *p, *ep;
+    long port;
+
+    /* Reply syntax per RFC 2428: "229 blah blah (|||port|)" where '|'
+     * can be any character in ASCII from 33-126, obscurely.  Verify
+     * the syntax. */
+    p = ap_strchr(reply, '(');
+    if (p == NULL || !p[0] || !p[1] || p[1] != p[2] || p[1] != p[3]
+        || p[4] == p[1]) {
+        return 0;
+    }
+
+    errno = 0;
+    port = strtol(p + 4, &ep, 10);
+    if (errno || port < 1 || port > 65535 || ep[0] != p[1] || ep[1] != ')') {
+        return 0;
+    }
+
+    return (apr_port_t)port;
+}
+
 /*
  * Generic "send FTP command to server" routine, using the control socket.
  * Returns the FTP returncode (3 digit code)
@@ -1210,26 +1235,11 @@
             return ftp_proxyerror(r, backend, HTTP_BAD_GATEWAY, ftpmessage);
         }
         else if (rc == 229) {
-            char *pstr;
-            char *tok_cntx;
-
-            pstr = ftpmessage;
-            pstr = apr_strtok(pstr, " ", &tok_cntx);    /* separate result code */
-            if (pstr != NULL) {
-                if (*(pstr + strlen(pstr) + 1) == '=') {
-                    pstr += strlen(pstr) + 2;
-                }
-                else {
-                    pstr = apr_strtok(NULL, "(", &tok_cntx);    /* separate address &
-                                                                 * port params */
-                    if (pstr != NULL)
-                        pstr = apr_strtok(NULL, ")", &tok_cntx);
-                }
-            }
+            /* Parse the port out of the EPSV reply. */
+            data_port = parse_epsv_reply(ftpmessage);
 
-            if (pstr) {
+            if (data_port) {
                 apr_sockaddr_t *epsv_addr;
-                data_port = atoi(pstr + 3);
 
                 ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
                        "proxy: FTP: EPSV contacting remote host on port %d",
@@ -1272,10 +1282,6 @@
                     connect = 1;
                 }
             }
-            else {
-                /* and try the regular way */
-                apr_socket_close(data_sock);
-            }
         }
     }
 
@@ -1364,10 +1370,6 @@
                     connect = 1;
                 }
             }
-            else {
-                /* and try the regular way */
-                apr_socket_close(data_sock);
-            }
         }
     }
 /*bypass:*/
@@ -1851,7 +1853,9 @@
                  * for a slow client to eat these bytes
                  */
                 ap_flush_conn(data);
-                apr_socket_close(data_sock);
+                if (data_sock) {
+                    apr_socket_close(data_sock);
+                }
                 data_sock = NULL;
                 ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
                              "proxy: FTP: data connection closed");
