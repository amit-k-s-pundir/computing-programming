#include <string>
#include <iostream>
#include <vector>
#include <algorithm>

#include <cunistd>
#include <cstdlib>
#include <cstdarg>


using namespace std;

typedef int (*F)(int argc, void* arg1, ...);

void runProcess(F f, int argc, void* arg1, ...){
  va_list ap;
  va_start(ap, arg1);
  void * argv[];
  for(int i = 0; i < argc; ++i){
    argv[i] = va_arg(ap, void*);
  }
  const char* arg;
  while((arg = va_arg(ap)) != ap){
    printf("%s\n", arg);
  } 
};

struct F{
  template<class R, class... Args> struct apply{
    apply(std::function<R(Args...)>& f) : f(f){
    }
    R operator()(Args... args){
      f(args...);
    }
    std::function<R(Args...)> f;
  };
};
    
struct ArgList{
  template<class... Args> struct argList{
    argList(std::tuple<Args...>& args) : args_(args){
    }
    std::tuple<Args...> operator()(){
      this->args;
    }
    std::tuple<Args...> args_;
  };
};
    
pid_t runProcess(ProcessFunction& fn, ProcessFunctionArgs& args){
  //  int status;
  pid_t cpid = fork();
  if(0 == cpid){// we are in the child process
    fn(args);
  }else{// we are the parent process
    //    waitpid(cpid, &status
    return cpid;
  }
};

int runProcessess(ProcessFunctions& processFunctions, ProcessFunctionsArgs& processFunctionArgs){
  int size = ProcessFunctions::size;
  if(processFunctionArgs::size != size) throw("The number of functions and the number of args should be same");
  for(int i = 0; i <= size; ++i){
    auto fn = get<decltype(processFunctions)>(i);
    auto args = get<decltype(processFunctionArgs)>(i);
    runProcess(fn, args);
  }
  
  // int i = 0;
  // (for f& : processFunctionList){
  //   f->apply(processArgs[i]);
  //   i++;
  // }
};

int runProcessGroup(processFunctions& processFunctions, ProcessFunctionsArgs& processFunctionsArgs, int groupSize){
  int totalSize = processFunctions.size();
  div_t result = div(totalSize, groupSize);
  for(int i = 0; i < result.quot; i++){
    vector<int> cpids;
    for(int j = 0; j < groupSize; j++){
      int index = i * groupSize + j;
      cpids.push_back(runProcess(get<index>(processFunctions), get<index>(processFunctionsArgs)));
    }
    //wait till all the child processess have successfully finished
    do{

};

// template<class R, class... Args> R doInGroups(function<R(Args... args)> f, int groupSize, int totalSize){
//   div_t result = div(totalSize, groupSize);
//   int numberOfGroups = result.quot 
   
//   for(

int main(int argc, char* argv[]){
  //  apply<F, ArgList>(f, argList);
  
  return 0;
}
f
